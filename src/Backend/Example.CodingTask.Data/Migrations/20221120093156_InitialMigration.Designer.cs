// <auto-generated />
using System;
using Cleverbit.CodingTask.Data;
using Example.CodingTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cleverbit.CodingTask.Data.Migrations
{
    [DbContext(typeof(CodingTaskContext))]
    [Migration("20221120093156_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cleverbit.CodingTask.Core.Entity.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6b54753-e71d-4521-a89b-8aab0ea209c4"),
                            Name = "Match A",
                            TimeStamp = new DateTime(2022, 11, 20, 11, 34, 56, 190, DateTimeKind.Local).AddTicks(927)
                        },
                        new
                        {
                            Id = new Guid("3fac18da-97bb-4890-bf61-54d2cdc3385c"),
                            Name = "Match F",
                            TimeStamp = new DateTime(2022, 11, 20, 11, 36, 56, 190, DateTimeKind.Local).AddTicks(6384)
                        },
                        new
                        {
                            Id = new Guid("81ceba72-b1fc-4bec-aa9c-98c26639c87d"),
                            Name = "Match B",
                            TimeStamp = new DateTime(2022, 11, 20, 11, 38, 56, 190, DateTimeKind.Local).AddTicks(6407)
                        },
                        new
                        {
                            Id = new Guid("dc54642a-b550-4434-971e-be686be93a59"),
                            Name = "Match C",
                            TimeStamp = new DateTime(2022, 11, 20, 11, 39, 56, 190, DateTimeKind.Local).AddTicks(6409)
                        },
                        new
                        {
                            Id = new Guid("9b81c707-b0d9-497f-9a19-2647c3941acb"),
                            Name = "Match D",
                            TimeStamp = new DateTime(2022, 11, 20, 11, 41, 56, 190, DateTimeKind.Local).AddTicks(6411)
                        },
                        new
                        {
                            Id = new Guid("40101467-c365-4af1-a9a8-cc253b74d58b"),
                            Name = "Match E",
                            TimeStamp = new DateTime(2022, 11, 20, 11, 42, 56, 190, DateTimeKind.Local).AddTicks(6415)
                        });
                });

            modelBuilder.Entity("Cleverbit.CodingTask.Core.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cleverbit.CodingTask.Core.Entity.UserMatch", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("UserMatches");
                });

            modelBuilder.Entity("Cleverbit.CodingTask.Core.Entity.UserMatch", b =>
                {
                    b.HasOne("Cleverbit.CodingTask.Core.Entity.Match", "Match")
                        .WithMany("UserMatches")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cleverbit.CodingTask.Core.Entity.User", "User")
                        .WithMany("UserMatches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cleverbit.CodingTask.Core.Entity.Match", b =>
                {
                    b.Navigation("UserMatches");
                });

            modelBuilder.Entity("Cleverbit.CodingTask.Core.Entity.User", b =>
                {
                    b.Navigation("UserMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
